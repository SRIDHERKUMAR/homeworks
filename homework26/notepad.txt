NPM commands:
1>  DEPENDENCIES

If a package references to another package with a git URL, npm depends on a preinstalled git.
2>DIRECTORIES

3> DEVELOPER USAGE

If you're using npm to develop and publish your code, check out the following help topics:

json: Make a package.json file. See package.json.
link: For linking your current working code into Node's path, so that you don't have to reinstall every time you make a change. Use npm link to do this.
install: It's a good idea to install things if you don't need the symbolic link. Especially, installing other peoples code from the registry is done via npm install
adduser: Create an account or log in. Credentials are stored in the user config file.
publish: Use the npm publish command to upload your code to the registry.
4> Configuration

npm is extremely configurable. It reads its configuration options from 5 places.

Command line switches:
Set a config with --key val. All keys take a value, even if they are booleans (the config parser doesn't know what the options are at the time of parsing.) If no value is provided, then the option is set to boolean true.
Environment Variables:
Set any config by prefixing the name in an environment variable with npm_config_. For example, export npm_config_key=val.
User Configs:
The file at $HOME/.npmrc is an ini-formatted list of configs. If present, it is parsed. If the userconfig option is set in the cli or env, then that will be used instead.
Global Configs:
The file found at ../etc/npmrc (from the node executable, by default this resolves to /usr/local/etc/npmrc) will be parsed if it is found. If the globalconfig option is set in the cli, env, or user config, then that file is parsed instead.
Defaults:
npm's default configuration options are defined in lib/utils/config-defs.js. These must not be changed.
5> CONTRIBUTIONS

Patches welcome!

code: Read through npm-coding-style if you plan to submit code. You don't have to agree with it, but you do have to follow it.
docs: If you find an error in the documentation, edit the appropriate markdown file in the "doc" folder. (Don't worry about generating the man page.)
Contributors are listed in npm's package.json file. You can view them easily by doing npm view npm contributors.

If you would like to contribute, but don't know what to work on, check the issues list or ask on the mailing list.




Package.json:
Description

This document is all you need to know about what's required in your package.json file. It must be actual JSON, not just a JavaScript object literal.

A lot of the behavior described in this document is affected by the config settings described in npm-config.

 1> diff between dependencies and dev-dependencies?
Summary of important behavior differences:

dependencies are installed on both:
npm install from a directory that contains package.json
npm install $package on any other directory
devDependencies are:
also installed on npm install on a directory that contains package.json, unless you pass the --production flag (go upvote Gayan Charith's answer).
not installed on npm install "$package" on any other directory, unless you give it the --dev option.
are not installed transitively.
peerDependencies:
before 3.0: are always installed if missing, and raise an error if multiple incompatible versions of the dependency would be used by different dependencies.
expected starting on 3.0 (untested): give a warning if missing on npm install, and you have to solve the dependency yourself manually. When running, if the dependency is missing, you get an error.
Transitivity (mentioned by Ben Hutchison):
dependencies are installed transitively: if A requires B, and B requires C, then C gets installed, otherwise B could not work, and neither would A.
devDependencies are not installed transitively. E.g. we don't need to test B to test A, so B's testing dependencies can be left out.

MEAN Stack?

MEAN is a free and open-source JavaScript software stack for building dynamic web sites and web applications.

The MEAN stack is MongoDB, Express.js, Angular, and Node.js. Because all components of the MEAN stack support programs written in JavaScript, MEAN applications can be written in one language for both server-side and client-side execution environments.